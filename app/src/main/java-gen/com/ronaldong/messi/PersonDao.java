package com.ronaldong.messi;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON".
*/
public class PersonDao extends AbstractDao<Person, Long> {

    public static final String TABLENAME = "PERSON";

    /**
     * Properties of entity Person.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Pinyin = new Property(2, String.class, "pinyin", false, "PINYIN");
        public final static Property Avatar = new Property(3, String.class, "avatar", false, "AVATAR");
        public final static Property Room = new Property(4, String.class, "room", false, "ROOM");
        public final static Property HasInstalled = new Property(5, String.class, "hasInstalled", false, "HAS_INSTALLED");
        public final static Property PersonType = new Property(6, Integer.class, "personType", false, "PERSON_TYPE");
        public final static Property MobileNum = new Property(7, String.class, "mobileNum", false, "MOBILE_NUM");
        public final static Property WorkNum = new Property(8, String.class, "workNum", false, "WORK_NUM");
        public final static Property ShortNum = new Property(9, String.class, "shortNum", false, "SHORT_NUM");
        public final static Property JobNum = new Property(10, String.class, "jobNum", false, "JOB_NUM");
        public final static Property Email = new Property(11, String.class, "email", false, "EMAIL");
        public final static Property Duty = new Property(12, String.class, "duty", false, "DUTY");
        public final static Property Gender = new Property(13, String.class, "gender", false, "GENDER");
        public final static Property Deleted = new Property(14, String.class, "deleted", false, "DELETED");
        public final static Property Lut = new Property(15, Long.class, "lut", false, "LUT");
    };


    public PersonDao(DaoConfig config) {
        super(config);
    }
    
    public PersonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"PINYIN\" TEXT," + // 2: pinyin
                "\"AVATAR\" TEXT," + // 3: avatar
                "\"ROOM\" TEXT," + // 4: room
                "\"HAS_INSTALLED\" TEXT," + // 5: hasInstalled
                "\"PERSON_TYPE\" INTEGER," + // 6: personType
                "\"MOBILE_NUM\" TEXT," + // 7: mobileNum
                "\"WORK_NUM\" TEXT," + // 8: workNum
                "\"SHORT_NUM\" TEXT," + // 9: shortNum
                "\"JOB_NUM\" TEXT," + // 10: jobNum
                "\"EMAIL\" TEXT," + // 11: email
                "\"DUTY\" TEXT," + // 12: duty
                "\"GENDER\" TEXT," + // 13: gender
                "\"DELETED\" TEXT," + // 14: deleted
                "\"LUT\" INTEGER);"); // 15: lut
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Person entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(3, pinyin);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        String room = entity.getRoom();
        if (room != null) {
            stmt.bindString(5, room);
        }
 
        String hasInstalled = entity.getHasInstalled();
        if (hasInstalled != null) {
            stmt.bindString(6, hasInstalled);
        }
 
        Integer personType = entity.getPersonType();
        if (personType != null) {
            stmt.bindLong(7, personType);
        }
 
        String mobileNum = entity.getMobileNum();
        if (mobileNum != null) {
            stmt.bindString(8, mobileNum);
        }
 
        String workNum = entity.getWorkNum();
        if (workNum != null) {
            stmt.bindString(9, workNum);
        }
 
        String shortNum = entity.getShortNum();
        if (shortNum != null) {
            stmt.bindString(10, shortNum);
        }
 
        String jobNum = entity.getJobNum();
        if (jobNum != null) {
            stmt.bindString(11, jobNum);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(12, email);
        }
 
        String duty = entity.getDuty();
        if (duty != null) {
            stmt.bindString(13, duty);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(14, gender);
        }
 
        String deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindString(15, deleted);
        }
 
        Long lut = entity.getLut();
        if (lut != null) {
            stmt.bindLong(16, lut);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Person readEntity(Cursor cursor, int offset) {
        Person entity = new Person( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pinyin
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // avatar
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // room
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // hasInstalled
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // personType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mobileNum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // workNum
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // shortNum
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // jobNum
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // email
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // duty
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // gender
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // deleted
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15) // lut
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Person entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPinyin(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRoom(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHasInstalled(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPersonType(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setMobileNum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWorkNum(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setShortNum(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setJobNum(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEmail(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDuty(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGender(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDeleted(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLut(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Person entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Person entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
