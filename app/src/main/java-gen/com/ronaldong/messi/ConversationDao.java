package com.ronaldong.messi;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONVERSATION".
*/
public class ConversationDao extends AbstractDao<Conversation, Long> {

    public static final String TABLENAME = "CONVERSATION";

    /**
     * Properties of entity Conversation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Avatar = new Property(2, String.class, "avatar", false, "AVATAR");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Deleted = new Property(5, String.class, "deleted", false, "DELETED");
        public final static Property Lut = new Property(6, Long.class, "lut", false, "LUT");
        public final static Property Silent = new Property(7, String.class, "silent", false, "SILENT");
        public final static Property IsTmp = new Property(8, String.class, "isTmp", false, "IS_TMP");
        public final static Property TargetId = new Property(9, Long.class, "targetId", false, "TARGET_ID");
        public final static Property TargetType = new Property(10, String.class, "targetType", false, "TARGET_TYPE");
    };

    private DaoSession daoSession;


    public ConversationDao(DaoConfig config) {
        super(config);
    }
    
    public ConversationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONVERSATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"AVATAR\" TEXT," + // 2: avatar
                "\"TITLE\" TEXT," + // 3: title
                "\"CONTENT\" TEXT," + // 4: content
                "\"DELETED\" TEXT," + // 5: deleted
                "\"LUT\" INTEGER," + // 6: lut
                "\"SILENT\" TEXT," + // 7: silent
                "\"IS_TMP\" TEXT," + // 8: isTmp
                "\"TARGET_ID\" INTEGER," + // 9: targetId
                "\"TARGET_TYPE\" TEXT);"); // 10: targetType
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONVERSATION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Conversation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(3, avatar);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindString(6, deleted);
        }
 
        Long lut = entity.getLut();
        if (lut != null) {
            stmt.bindLong(7, lut);
        }
 
        String silent = entity.getSilent();
        if (silent != null) {
            stmt.bindString(8, silent);
        }
 
        String isTmp = entity.getIsTmp();
        if (isTmp != null) {
            stmt.bindString(9, isTmp);
        }
 
        Long targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindLong(10, targetId);
        }
 
        String targetType = entity.getTargetType();
        if (targetType != null) {
            stmt.bindString(11, targetType);
        }
    }

    @Override
    protected void attachEntity(Conversation entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Conversation readEntity(Cursor cursor, int offset) {
        Conversation entity = new Conversation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // avatar
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // deleted
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // lut
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // silent
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // isTmp
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // targetId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // targetType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Conversation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAvatar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeleted(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLut(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setSilent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsTmp(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTargetId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setTargetType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Conversation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Conversation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
