package com.ronaldong.messi;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import java.io.Serializable;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "MESSAGES".
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class Message implements Serializable {

    private Long id;
    private Long messageId;
    private Long senderId;
    private long conversationId;
    private String type;
    private String title;
    private String content;
    private Integer state;
    private Double latitude;
    private Double longitude;
    private Boolean isSend;
    private java.util.Date sendTime;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MessageDao myDao;

    private Conversation conversation;
    private Long conversation__resolvedKey;


    public Message() {
    }

    public Message(Long id) {
        this.id = id;
    }

    public Message(Long id, Long messageId, Long senderId, long conversationId, String type, String title, String content, Integer state, Double latitude, Double longitude, Boolean isSend, java.util.Date sendTime) {
        this.id = id;
        this.messageId = messageId;
        this.senderId = senderId;
        this.conversationId = conversationId;
        this.type = type;
        this.title = title;
        this.content = content;
        this.state = state;
        this.latitude = latitude;
        this.longitude = longitude;
        this.isSend = isSend;
        this.sendTime = sendTime;
    }

    public Message(Long senderId, long conversationId, String type, String title, String content, Integer state, Boolean isSend, java.util.Date sendTime) {
        this.senderId = senderId;
        this.conversationId = conversationId;
        this.type = type;
        this.title = title;
        this.content = content;
        this.state = state;

        this.isSend = isSend;
        this.sendTime = sendTime;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMessageDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getMessageId() {
        return messageId;
    }

    public void setMessageId(Long messageId) {
        this.messageId = messageId;
    }

    public Long getSenderId() {
        return senderId;
    }

    public void setSenderId(Long senderId) {
        this.senderId = senderId;
    }

    public long getConversationId() {
        return conversationId;
    }

    public void setConversationId(long conversationId) {
        this.conversationId = conversationId;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public Integer getState() {
        return state;
    }

    public void setState(Integer state) {
        this.state = state;
    }

    public Double getLatitude() {
        return latitude;
    }

    public void setLatitude(Double latitude) {
        this.latitude = latitude;
    }

    public Double getLongitude() {
        return longitude;
    }

    public void setLongitude(Double longitude) {
        this.longitude = longitude;
    }

    public Boolean getIsSend() {
        return isSend;
    }

    public void setIsSend(Boolean isSend) {
        this.isSend = isSend;
    }

    public java.util.Date getSendTime() {
        return sendTime;
    }

    public void setSendTime(java.util.Date sendTime) {
        this.sendTime = sendTime;
    }

    /** To-one relationship, resolved on first access. */
    public Conversation getConversation() {
        long __key = this.conversationId;
        if (conversation__resolvedKey == null || !conversation__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ConversationDao targetDao = daoSession.getConversationDao();
            Conversation conversationNew = targetDao.load(__key);
            synchronized (this) {
                conversation = conversationNew;
            	conversation__resolvedKey = __key;
            }
        }
        return conversation;
    }

    public void setConversation(Conversation conversation) {
        if (conversation == null) {
            throw new DaoException("To-one property 'conversationId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.conversation = conversation;
            conversationId = conversation.getId();
            conversation__resolvedKey = conversationId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
