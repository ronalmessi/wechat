package com.ronaldong.messi;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig organizeDaoConfig;
    private final DaoConfig workGroupDaoConfig;
    private final DaoConfig personDaoConfig;
    private final DaoConfig relationDaoConfig;
    private final DaoConfig attachmentDaoConfig;
    private final DaoConfig conversationDaoConfig;
    private final DaoConfig messageDaoConfig;

    private final OrganizeDao organizeDao;
    private final WorkGroupDao workGroupDao;
    private final PersonDao personDao;
    private final RelationDao relationDao;
    private final AttachmentDao attachmentDao;
    private final ConversationDao conversationDao;
    private final MessageDao messageDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        organizeDaoConfig = daoConfigMap.get(OrganizeDao.class).clone();
        organizeDaoConfig.initIdentityScope(type);

        workGroupDaoConfig = daoConfigMap.get(WorkGroupDao.class).clone();
        workGroupDaoConfig.initIdentityScope(type);

        personDaoConfig = daoConfigMap.get(PersonDao.class).clone();
        personDaoConfig.initIdentityScope(type);

        relationDaoConfig = daoConfigMap.get(RelationDao.class).clone();
        relationDaoConfig.initIdentityScope(type);

        attachmentDaoConfig = daoConfigMap.get(AttachmentDao.class).clone();
        attachmentDaoConfig.initIdentityScope(type);

        conversationDaoConfig = daoConfigMap.get(ConversationDao.class).clone();
        conversationDaoConfig.initIdentityScope(type);

        messageDaoConfig = daoConfigMap.get(MessageDao.class).clone();
        messageDaoConfig.initIdentityScope(type);

        organizeDao = new OrganizeDao(organizeDaoConfig, this);
        workGroupDao = new WorkGroupDao(workGroupDaoConfig, this);
        personDao = new PersonDao(personDaoConfig, this);
        relationDao = new RelationDao(relationDaoConfig, this);
        attachmentDao = new AttachmentDao(attachmentDaoConfig, this);
        conversationDao = new ConversationDao(conversationDaoConfig, this);
        messageDao = new MessageDao(messageDaoConfig, this);

        registerDao(Organize.class, organizeDao);
        registerDao(WorkGroup.class, workGroupDao);
        registerDao(Person.class, personDao);
        registerDao(Relation.class, relationDao);
        registerDao(Attachment.class, attachmentDao);
        registerDao(Conversation.class, conversationDao);
        registerDao(Message.class, messageDao);
    }
    
    public void clear() {
        organizeDaoConfig.getIdentityScope().clear();
        workGroupDaoConfig.getIdentityScope().clear();
        personDaoConfig.getIdentityScope().clear();
        relationDaoConfig.getIdentityScope().clear();
        attachmentDaoConfig.getIdentityScope().clear();
        conversationDaoConfig.getIdentityScope().clear();
        messageDaoConfig.getIdentityScope().clear();
    }

    public OrganizeDao getOrganizeDao() {
        return organizeDao;
    }

    public WorkGroupDao getWorkGroupDao() {
        return workGroupDao;
    }

    public PersonDao getPersonDao() {
        return personDao;
    }

    public RelationDao getRelationDao() {
        return relationDao;
    }

    public AttachmentDao getAttachmentDao() {
        return attachmentDao;
    }

    public ConversationDao getConversationDao() {
        return conversationDao;
    }

    public MessageDao getMessageDao() {
        return messageDao;
    }

}
